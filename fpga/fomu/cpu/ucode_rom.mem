/*  CODE    ADR  DISASM                  NAMES                     */
    c25c // 000: BOOT
    002f // 001: FAIL                    PANIC!
    8001 // 002: jump(001)
    521f // 003: (CONST)                 ^C
    0003 // 004: 0x0003
    521f // 005: (CONST)                 '\b'
    0008 // 006: 0x0008
    521f // 007: (CONST)                 '\t'
    0009 // 008: 0x0009
    521f // 009: (CONST)                 '\n'
    000a // 00a: 0x000a
    521f // 00b: (CONST)                 '\r'
    000d // 00c: 0x000d
    521f // 00d: (CONST)                 BL
    0020 // 00e: 0x0020
    521f // 00f: (CONST)                 '0'
    0030 // 010: 0x0030
    521f // 011: (CONST)                 '9'
    0039 // 012: 0x0039
    521f // 013: (CONST)                 A-10
    0037 // 014: 0x0037
    521f // 015: (CONST)                 'A'
    0041 // 016: 0x0041
    521f // 017: (CONST)                 'F'
    0046 // 018: 0x0046
    521f // 019: (CONST)                 'Z'
    005a // 01a: 0x005a
    521f // 01b: (CONST)                 'a'
    0061 // 01c: 0x0061
    521f // 01d: (CONST)                 'f'
    0066 // 01e: 0x0066
    521f // 01f: (CONST)                 'z'
    007a // 020: 0x007a
    521f // 021: (CONST)                 DEL
    007f // 022: 0x007f
    030f // 023: @                       @EXECUTE
    021f // 024: (LIT)                   EXECUTE
    0fff // 025: 0x0fff
    0744 // 026: AND
    2100 // 027: >R
    5000 // 028: NOP EXIT                (EXIT)
    902b // 029: jump_ifzero(02b)        ?:
    0400 // 02a: SWAP
    5100 // 02b: DROP EXIT               (DROP)
    0400 // 02c: SWAP                    NIP
    5100 // 02d: DROP EXIT
    0400 // 02e: SWAP                    TUCK
    5240 // 02f: OVER EXIT
    0240 // 030: OVER                    2DUP
    5240 // 031: OVER EXIT
    0100 // 032: DROP                    2DROP
    5100 // 033: DROP EXIT
    0200 // 034: DUP                     ABS
    0324 // 035: MSB&
    9038 // 036: jump_ifzero(038)
    53c2 // 037: NEGATE EXIT
    903b // 038: jump_ifzero(03b)        BOOL
    02f6 // 039: TRUE
    803c // 03a: jump(03c)
    02c0 // 03b: 0
    5000 // 03c: NOP EXIT
    0745 // 03d: XOR                     =
    9041 // 03e: jump_ifzero(041)        0= NOT
    02c0 // 03f: 0
    8042 // 040: jump(042)
    02f6 // 041: TRUE
    5000 // 042: NOP EXIT
    c03d // 043: =                       <>
    5335 // 044: INVERT EXIT
    03c2 // 045: NEGATE                  0>
    0324 // 046: MSB&                    0<
    8038 // 047: jump(038)
    0400 // 048: SWAP                    >
    0742 // 049: -                       <
    8046 // 04a: jump(046)
    c049 // 04b: <                       >=
    5335 // 04c: INVERT EXIT
    c048 // 04d: >                       <=
    5335 // 04e: INVERT EXIT
    c030 // 04f: 2DUP                    MAX
    c049 // 050: <
    8029 // 051: jump(029)
    c030 // 052: 2DUP                    MIN
    c048 // 053: >
    8029 // 054: jump(029)
    0200 // 055: DUP                     @1+
    030f // 056: @
    0311 // 057: 1+
    0400 // 058: SWAP
    598f // 059: ! EXIT
    0200 // 05a: DUP                     @1-
    030f // 05b: @
    0312 // 05c: 1-
    0400 // 05d: SWAP
    598f // 05e: ! EXIT
    0600 // 05f: -ROT                    INBOUNDS
    0240 // 060: OVER
    0400 // 061: SWAP
    0742 // 062: -
    0600 // 063: -ROT
    0742 // 064: -
    0746 // 065: OR
    0324 // 066: MSB&
    803e // 067: jump(03e)
    c00f // 068: '0'                     ISDIGIT
    c011 // 069: '9'
    805f // 06a: jump(05f)
    0200 // 06b: DUP                     ISHEX
    c015 // 06c: 'A'
    c017 // 06d: 'F'
    c05f // 06e: INBOUNDS
    0240 // 06f: OVER
    c01b // 070: 'a'
    c01d // 071: 'f'
    c05f // 072: INBOUNDS
    0746 // 073: OR
    0400 // 074: SWAP
    c068 // 075: ISDIGIT
    5746 // 076: OR EXIT
    c015 // 077: 'A'                     ISUPPER
    c019 // 078: 'Z'
    805f // 079: jump(05f)
    c01b // 07a: 'a'                     ISLOWER
    c01f // 07b: 'z'
    805f // 07c: jump(05f)
    0200 // 07d: DUP                     TOUPPER
    c07a // 07e: ISLOWER
    9082 // 07f: jump_ifzero(082)
    c00d // 080: BL
    0745 // 081: XOR
    5000 // 082: NOP EXIT
    0200 // 083: DUP                     TOLOWER
    c077 // 084: ISUPPER
    9088 // 085: jump_ifzero(088)
    c00d // 086: BL
    0745 // 087: XOR
    5000 // 088: NOP EXIT
    021f // 089: (LIT)                   TOHEX
    000f // 08a: 0x000f
    0744 // 08b: AND
    0200 // 08c: DUP
    021f // 08d: (LIT)
    000a // 08e: 0x000a
    c049 // 08f: <
    9093 // 090: jump_ifzero(093)
    c00f // 091: '0'
    8094 // 092: jump(094)
    c013 // 093: A-10
    5741 // 094: + EXIT
    c07d // 095: TOUPPER                 FROMHEX
    0200 // 096: DUP
    c015 // 097: 'A'
    c049 // 098: <
    909c // 099: jump_ifzero(09c)
    c00f // 09a: '0'
    809d // 09b: jump(09d)
    c013 // 09c: A-10
    5742 // 09d: - EXIT
    021f // 09e: (LIT)                   TX? EMIT?
    0000 // 09f: NOP
    533f // 0a0: IO@ EXIT
    c00d // 0a1: BL                      SPACE
    c09e // 0a2: TX?                     EMIT
    90a2 // 0a3: jump_ifzero(0a2)
    021f // 0a4: (LIT)                   TX!
    0001 // 0a5: 0x0001
    59bf // 0a6: IO! EXIT
    021f // 0a7: (LIT)                   RX? KEY?
    0002 // 0a8: 0x0002
    533f // 0a9: IO@ EXIT
    c0a7 // 0aa: RX?                     KEY
    90aa // 0ab: jump_ifzero(0aa)
    021f // 0ac: (LIT)                   RX@
    0003 // 0ad: 0x0003
    533f // 0ae: IO@ EXIT
    2100 // 0af: >R                      SPACES
    80b2 // 0b0: jump(0b2)
    c0a1 // 0b1: SPACE
    b0b1 // 0b2: jump_ifnz_dec(0b1)
    5000 // 0b3: NOP EXIT
    c00b // 0b4: '\r'                    CR
    c0a2 // 0b5: EMIT
    c009 // 0b6: '\n'
    80a2 // 0b7: jump(0a2)
    0200 // 0b8: DUP                     ECHO
    c0a2 // 0b9: EMIT
    c00b // 0ba: '\r'
    c03d // 0bb: =
    90bf // 0bc: jump_ifzero(0bf)
    c009 // 0bd: '\n'
    c0a2 // 0be: EMIT
    5000 // 0bf: NOP EXIT
    c089 // 0c0: TOHEX                   X#
    80a2 // 0c1: jump(0a2)
    021f // 0c2: (LIT)                   X.
    0004 // 0c3: 0x0004
    2100 // 0c4: >R
    80c9 // 0c5: jump(0c9)
    0309 // 0c6: 4ROL
    0200 // 0c7: DUP
    c0c0 // 0c8: X#
    b0c6 // 0c9: jump_ifnz_dec(0c6)
    5100 // 0ca: DROP EXIT
    521f // 0cb: (CONST)                 '!'
    0021 // 0cc: 0x0021
    521f // 0cd: (CONST)                 '.'
    002e // 0ce: 0x002e
    521f // 0cf: (CONST)                 '/'
    002f // 0d0: FAIL
    521f // 0d1: (CONST)                 '<'
    003c // 0d2: 0x003c
    521f // 0d3: (CONST)                 '>'
    003e // 0d4: 0x003e
    521f // 0d5: (CONST)                 '?'
    003f // 0d6: 0x003f
    521f // 0d7: (CONST)                 '@'
    0040 // 0d8: 0x0040
    521f // 0d9: (CONST)                 '['
    005b // 0da: 0x005b
    521f // 0db: (CONST)                 ']'
    005d // 0dc: 0x005d
    521f // 0dd: (CONST)                 'p'
    0070 // 0de: 0x0070
    521f // 0df: (CONST)                 'q'
    0071 // 0e0: 0x0071
    521f // 0e1: (CONST)                 'r'
    0072 // 0e2: 0x0072
    521f // 0e3: (CONST)                 cmd
    00e5 // 0e4: 0x00e5
    0000 // 0e5: NOP
    521f // 0e6: (CONST)                 inp
    00e8 // 0e7: 0x00e8
    0000 // 0e8: NOP
    521f // 0e9: (CONST)                 tos
    00eb // 0ea: 0x00eb
    0000 // 0eb: NOP
    521f // 0ec: (CONST)                 nos
    00ee // 0ed: 0x00ee
    0000 // 0ee: NOP
    521f // 0ef: (CONST)                 copy
    00f1 // 0f0: 0x00f1
    0000 // 0f1: NOP
    521f // 0f2: (CONST)                 here
    00f4 // 0f3: 0x00f4
    0000 // 0f4: NOP
    c0e9 // 0f5: tos                     push
    030f // 0f6: @
    c0ec // 0f7: nos
    098f // 0f8: !
    c0e9 // 0f9: tos
    598f // 0fa: ! EXIT
    c0e9 // 0fb: tos                     pop
    030f // 0fc: @
    c0ec // 0fd: nos
    030f // 0fe: @
    c0e9 // 0ff: tos
    598f // 100: ! EXIT
    0200 // 101: DUP                     quad
    0324 // 102: MSB&
    9108 // 103: jump_ifzero(108)
    021f // 104: (LIT)
    0fff // 105: 0x0fff
    0744 // 106: AND
    8117 // 107: jump(117)
    0308 // 108: 2ROL
    0200 // 109: DUP
    0314 // 10a: LSB&
    9113 // 10b: jump_ifzero(113)
    021f // 10c: (LIT)
    3ffc // 10d: 0x3ffc
    0744 // 10e: AND
    021f // 10f: (LIT)
    4000 // 110: 0x4000
    0746 // 111: OR
    8117 // 112: jump(117)
    021f // 113: (LIT)
    7ffc // 114: 0x7ffc
    0744 // 115: AND
    0326 // 116: MSB|
    5000 // 117: NOP EXIT
    0200 // 118: DUP                     parse_qaddr
    021f // 119: (LIT)
    0003 // 11a: 0x0003
    0744 // 11b: AND
    0400 // 11c: SWAP
    0200 // 11d: DUP
    0324 // 11e: MSB&
    9125 // 11f: jump_ifzero(125)
    030c // 120: 2ASR
    021f // 121: (LIT)
    1fff // 122: 0x1fff
    0744 // 123: AND
    812c // 124: jump(12c)
    030c // 125: 2ASR
    021f // 126: (LIT)
    0fff // 127: 0x0fff
    0744 // 128: AND
    021f // 129: (LIT)
    4000 // 12a: 0x4000
    0746 // 12b: OR
    5000 // 12c: NOP EXIT
    0200 // 12d: DUP                     fetch
    021f // 12e: (LIT)
    c000 // 12f: call(000)
    0744 // 130: AND
    914b // 131: jump_ifzero(14b)
    c118 // 132: parse_qaddr
    0240 // 133: OVER
    021f // 134: (LIT)
    0001 // 135: 0x0001
    c03d // 136: =
    913a // 137: jump_ifzero(13a)
    035f // 138: QX@
    8149 // 139: jump(149)
    0240 // 13a: OVER
    021f // 13b: (LIT)
    0002 // 13c: 0x0002
    c03d // 13d: =
    9141 // 13e: jump_ifzero(141)
    036f // 13f: QY@
    8149 // 140: jump(149)
    0240 // 141: OVER
    021f // 142: (LIT)
    0003 // 143: 0x0003
    c03d // 144: =
    9148 // 145: jump_ifzero(148)
    037f // 146: QZ@
    8149 // 147: jump(149)
    034f // 148: QT@
    c02c // 149: NIP
    814c // 14a: jump(14c)
    030f // 14b: @
    5000 // 14c: NOP EXIT
    0200 // 14d: DUP                     store
    021f // 14e: (LIT)
    c000 // 14f: call(000)
    0744 // 150: AND
    916f // 151: jump_ifzero(16f)
    c118 // 152: parse_qaddr
    0400 // 153: SWAP
    0200 // 154: DUP
    021f // 155: (LIT)
    0001 // 156: 0x0001
    c03d // 157: =
    915c // 158: jump_ifzero(15c)
    0100 // 159: DROP
    09df // 15a: QX!
    816e // 15b: jump(16e)
    0200 // 15c: DUP
    021f // 15d: (LIT)
    0002 // 15e: 0x0002
    c03d // 15f: =
    9164 // 160: jump_ifzero(164)
    0100 // 161: DROP
    09ef // 162: QY!
    816e // 163: jump(16e)
    0200 // 164: DUP
    021f // 165: (LIT)
    0003 // 166: 0x0003
    c03d // 167: =
    916c // 168: jump_ifzero(16c)
    0100 // 169: DROP
    09ff // 16a: QZ!
    816e // 16b: jump(16e)
    0100 // 16c: DROP
    09cf // 16d: QT!
    8170 // 16e: jump(170)
    098f // 16f: !
    5000 // 170: NOP EXIT
    0240 // 171: OVER                    dump
    0742 // 172: -
    0200 // 173: DUP
    c046 // 174: 0<
    9178 // 175: jump_ifzero(178)
    c032 // 176: 2DROP
    818a // 177: jump(18a)
    0311 // 178: 1+
    2100 // 179: >R
    8187 // 17a: jump(187)
    0200 // 17b: DUP
    c12d // 17c: fetch
    0240 // 17d: OVER
    021f // 17e: (LIT)
    0007 // 17f: 0x0007
    0744 // 180: AND
    9184 // 181: jump_ifzero(184)
    c0a1 // 182: SPACE
    8185 // 183: jump(185)
    c0b4 // 184: CR
    c0c2 // 185: X.
    0311 // 186: 1+
    b17b // 187: jump_ifnz_dec(17b)
    c0b4 // 188: CR
    0100 // 189: DROP
    5000 // 18a: NOP EXIT
    c095 // 18b: FROMHEX                 >inp
    c0e6 // 18c: inp
    030f // 18d: @
    0309 // 18e: 4ROL
    021f // 18f: (LIT)
    fff0 // 190: call_ifnz_dec(ff0)
    0744 // 191: AND
    0746 // 192: OR
    c0e6 // 193: inp
    598f // 194: ! EXIT
    c0f2 // 195: here                    >here
    030f // 196: @
    c14d // 197: store
    c0f2 // 198: here
    8055 // 199: jump(055)
    c0d3 // 19a: '>'                     prompt
    c0a2 // 19b: EMIT
    c00d // 19c: BL
    80a2 // 19d: jump(0a2)
    c0e3 // 19e: cmd                     del
    030f // 19f: @
    0200 // 1a0: DUP
    c00d // 1a1: BL
    c048 // 1a2: >
    91c1 // 1a3: jump_ifzero(1c1)
    0200 // 1a4: DUP
    c06b // 1a5: ISHEX
    91b8 // 1a6: jump_ifzero(1b8)
    c0e6 // 1a7: inp
    030f // 1a8: @
    030d // 1a9: 4ASR
    021f // 1aa: (LIT)
    0fff // 1ab: 0x0fff
    0744 // 1ac: AND
    0200 // 1ad: DUP
    91b2 // 1ae: jump_ifzero(1b2)
    0200 // 1af: DUP
    c089 // 1b0: TOHEX
    81b3 // 1b1: jump(1b3)
    c00d // 1b2: BL
    c0e3 // 1b3: cmd
    098f // 1b4: !
    c0e6 // 1b5: inp
    098f // 1b6: !
    81bb // 1b7: jump(1bb)
    c00d // 1b8: BL
    c0e3 // 1b9: cmd
    098f // 1ba: !
    c005 // 1bb: '\b'
    c0a2 // 1bc: EMIT
    c00d // 1bd: BL
    c0a2 // 1be: EMIT
    c005 // 1bf: '\b'
    c0a2 // 1c0: EMIT
    5100 // 1c1: DROP EXIT
    c0a2 // 1c2: EMIT                    eol
    c0aa // 1c3: KEY
    0200 // 1c4: DUP
    c00b // 1c5: '\r'
    c03d // 1c6: =
    91c9 // 1c7: jump_ifzero(1c9)
    5000 // 1c8: NOP EXIT
    81c2 // 1c9: jump(1c2)
    c0aa // 1ca: KEY                     MONITOR
    0200 // 1cb: DUP
    c003 // 1cc: ^C
    c03d // 1cd: =
    91d0 // 1ce: jump_ifzero(1d0)
    5000 // 1cf: NOP EXIT
    0200 // 1d0: DUP
    c005 // 1d1: '\b'
    c03d // 1d2: =
    91d6 // 1d3: jump_ifzero(1d6)
    0100 // 1d4: DROP
    c021 // 1d5: DEL
    0200 // 1d6: DUP
    c021 // 1d7: DEL
    0745 // 1d8: XOR
    d19e // 1d9: call_ifzero(19e)
    0200 // 1da: DUP
    c0cf // 1db: '/'
    0745 // 1dc: XOR
    d1c2 // 1dd: call_ifzero(1c2)
    0200 // 1de: DUP
    c0b8 // 1df: ECHO
    c0e3 // 1e0: cmd
    030f // 1e1: @
    0400 // 1e2: SWAP
    0200 // 1e3: DUP
    c00d // 1e4: BL
    c04d // 1e5: <=
    9244 // 1e6: jump_ifzero(244)
    c0ef // 1e7: copy
    030f // 1e8: @
    91f8 // 1e9: jump_ifzero(1f8)
    0240 // 1ea: OVER
    c06b // 1eb: ISHEX
    91f0 // 1ec: jump_ifzero(1f0)
    c0e6 // 1ed: inp
    030f // 1ee: @
    c195 // 1ef: >here
    0240 // 1f0: OVER
    c0db // 1f1: ']'
    c03d // 1f2: =
    91f7 // 1f3: jump_ifzero(1f7)
    02c0 // 1f4: 0
    c0ef // 1f5: copy
    098f // 1f6: !
    823c // 1f7: jump(23c)
    0240 // 1f8: OVER
    c06b // 1f9: ISHEX
    91fe // 1fa: jump_ifzero(1fe)
    c0e6 // 1fb: inp
    030f // 1fc: @
    c0f5 // 1fd: push
    0240 // 1fe: OVER
    c0d7 // 1ff: '@'
    c03d // 200: =
    9205 // 201: jump_ifzero(205)
    c0fb // 202: pop
    c12d // 203: fetch
    c0f5 // 204: push
    0240 // 205: OVER
    c0cd // 206: '.'
    c03d // 207: =
    920c // 208: jump_ifzero(20c)
    c0fb // 209: pop
    c0c2 // 20a: X.
    c0b4 // 20b: CR
    0240 // 20c: OVER
    c0cb // 20d: '!'
    c03d // 20e: =
    9214 // 20f: jump_ifzero(214)
    c0fb // 210: pop
    c0fb // 211: pop
    0400 // 212: SWAP
    c14d // 213: store
    0240 // 214: OVER
    c0df // 215: 'q'
    c03d // 216: =
    921b // 217: jump_ifzero(21b)
    c0fb // 218: pop
    c101 // 219: quad
    c0f5 // 21a: push
    0240 // 21b: OVER
    c0dd // 21c: 'p'
    c03d // 21d: =
    9224 // 21e: jump_ifzero(224)
    c0fb // 21f: pop
    c118 // 220: parse_qaddr
    0400 // 221: SWAP
    c0f5 // 222: push
    c0f5 // 223: push
    0240 // 224: OVER
    c0d5 // 225: '?'
    c03d // 226: =
    922c // 227: jump_ifzero(22c)
    c0fb // 228: pop
    c0fb // 229: pop
    0400 // 22a: SWAP
    c171 // 22b: dump
    0240 // 22c: OVER
    c0d9 // 22d: '['
    c03d // 22e: =
    9236 // 22f: jump_ifzero(236)
    c0fb // 230: pop
    c0f2 // 231: here
    098f // 232: !
    02f6 // 233: TRUE
    c0ef // 234: copy
    098f // 235: !
    0240 // 236: OVER
    c0e1 // 237: 'r'
    c03d // 238: =
    923c // 239: jump_ifzero(23c)
    c0fb // 23a: pop
    c024 // 23b: EXECUTE
    02c0 // 23c: 0
    c0e6 // 23d: inp
    098f // 23e: !
    0200 // 23f: DUP
    c00b // 240: '\r'
    c03d // 241: =
    9244 // 242: jump_ifzero(244)
    c19a // 243: prompt
    0200 // 244: DUP
    c06b // 245: ISHEX
    9249 // 246: jump_ifzero(249)
    0200 // 247: DUP
    c18b // 248: >inp
    0200 // 249: DUP
    c021 // 24a: DEL
    c03d // 24b: =
    924f // 24c: jump_ifzero(24f)
    c032 // 24d: 2DROP
    8252 // 24e: jump(252)
    c02c // 24f: NIP
    c0e3 // 250: cmd
    098f // 251: !
    81ca // 252: jump(1ca)
    c0aa // 253: KEY                     ECHOLOOP
    0200 // 254: DUP
    c0c2 // 255: X.
    c0b4 // 256: CR
    c003 // 257: ^C
    c03d // 258: =
    925b // 259: jump_ifzero(25b)
    5000 // 25a: NOP EXIT
    8253 // 25b: jump(253)
    c253 // 25c: ECHOLOOP                BOOT
    c19a // 25d: prompt
    81ca // 25e: jump(1ca)
