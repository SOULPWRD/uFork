# Demonstrates the TCP networking device.

# Order of events (time moves downward):

#   ALICE               | BOB
#   --------------------+-------------------
#   Listens             |
#                       | Connects to alice
#                       | Writes the fixnum n
#   Reads n             |
#   Writes n-1          |
#                       | Reads n-1
#                       | Write n-2
#                      ...
#   Reads 1             |
#   Writes 0            |
#                       | Reads 0
#                       | Closes connection

DEF blob_key AS 4 # from dev.asm
DEF tcp_key AS 102 # from dev.asm
DEF blob_dev AS system(blob_key)
DEF tcp_dev AS system(tcp_key)
DEF alice_petname AS 0
DEF nr_writes AS 5
DEF blob_size AS 8
DEF blob_offset AS sub(blob_size, 1) # last byte
DEF tag_listen AS 5000
DEF tag_connect AS 5001
DEF tag_open AS 5002
DEF tag_close AS 5003
DEF tag_write AS 5004
DEF tag_read AS 5005
DEF tag_read_byte AS 5006
DEF label_beh(rcvr, label) AS \msg.[
    SEND (label, msg) TO rcvr
]
DEF callback_beh(tag, ok_cust, fail_cust) AS \result.[
    CASE result OF
    (TRUE, value) : [
        SEND (tag, value) TO println
        SEND value TO ok_cust
    ]
    (FALSE, error) : [
        SEND (tag, error) TO println
        SEND error TO fail_cust
    ]
    END
]
DEF write(conn, integer) AS [
    SEND (blob_cust, blob_size) TO blob_dev # alloc blob
    CREATE blob_cust WITH \blob.[
        SEND (blob_write_cust, blob_offset, integer) TO blob
        CREATE blob_write_cust WITH \_.[
            SEND (?, write_cb, blob) TO conn
        ]
    ]
]
DEF read(conn, consumed) AS [
    SEND (?, read_cb, ?) TO conn
    CREATE read_cb WITH callback_beh(tag_read, read_cust, sink)
    CREATE read_cust WITH \blob.[
        CASE is_actor(blob) OF
        TRUE : [
            SEND (blob_size_cust, ?) TO blob
            CREATE blob_size_cust WITH \size.[
                DEF sub_offset AS sub(blob_offset, consumed)
                CASE less(sub_offset, size) OF
                TRUE : [
                    SEND (blob_read_cust, sub_offset) TO blob
                    CREATE blob_read_cust WITH \integer.[
                        SEND (tag_read_byte, integer) TO println
                        CASE greater(integer, 0) OF
                        TRUE : [
                            read(conn, 0)
                            write(conn, sub(integer, 1))
                        ]
                        FALSE : [
                            SEND (?, write_cb, NIL) TO conn # close connection
                        ]
                        END
                    ]
                ]
                FALSE : [
                    read(conn, add(consumed, size)) # read next blob
                ]
                END
            ]
        ]
        END
    ]
]
CREATE sink WITH \_.[]
CREATE write_cb WITH callback_beh(tag_write, sink, sink)
CREATE listen_cb WITH callback_beh(tag_listen, listen_cust, sink)
CREATE listen_cust WITH \stop.[
    SEND (?, connect_cb, alice_petname) TO tcp_dev
    CREATE connect_cb WITH callback_beh(tag_connect, connect_cust, sink)
    CREATE connect_cust WITH \conn.[
        write(conn, nr_writes)
        read(conn, 0)
    ]
]
CREATE on_close WITH label_beh(println, tag_close)
CREATE on_open WITH \conn.[
    SEND (tag_open, conn) TO println
    read(conn, 0)
]
SEND (?, listen_cb, alice_petname, on_open, on_close) TO tcp_dev
