# Demonstrates the TCP networking device.

# Order of events (time moves downward):

#   ALICE               | BOB
#   --------------------+-------------------
#   Listens             |
#                       | Connects to alice
#                       | Writes blob
#   Reads blob          |
#   Writes blob         |
#                       | Reads blob
#                       | Closes connection

DEF alice_petname AS 0
DEF tag_listen AS 5000
DEF tag_connect AS 5001
DEF tag_open AS 5002
DEF tag_close AS 5003
DEF tag_write AS 5004
DEF tag_read AS 5005
CREATE write_cb WITH \result.[
    CASE result OF
    (TRUE, value) : [
        SEND (tag_write, value) TO println
    ]
    (FALSE, error) : [
        SEND (tag_write, error) TO println
    ]
    END
]
CREATE listen_cb WITH \result.[
    CASE result OF
    (TRUE, stop) : [
        SEND (tag_listen, stop) TO println
        SEND (?, connect_cb, alice_petname) TO tcp_dev
        CREATE connect_cb WITH \result.[
            CASE result OF
            (TRUE, conn) : [
                SEND (tag_connect, conn) TO println
                SEND (blob_cust, 1) TO blob_dev # alloc blob
                CREATE blob_cust WITH \blob.[
                    SEND (?, write_cb, blob) TO conn
                ]
                SEND (?, read_cb, ?) TO conn
                CREATE read_cb WITH \result.[
                    CASE result OF
                    (TRUE, blob) : [
                        SEND (tag_read, blob) TO println
                        SEND (?, write_cb, NIL) TO conn # close connection
                    ]
                    (FALSE, error) : [
                        SEND (tag_read, error) TO println
                    ]
                    END
                ]
            ]
            (FALSE, error) : [
                SEND (tag_connect, error) TO println
            ]
            END
        ]
    ]
    (FALSE, error) : [
        SEND (tag_listen, error) TO println
    ]
    END
]
CREATE on_open WITH \conn.[
    SEND (tag_open, conn) TO println
    SEND (?, read_cb, ?) TO conn
    CREATE read_cb WITH \result.[
        CASE result OF
        (TRUE, blob) : [
            SEND (tag_read, blob) TO println
            SEND (?, write_cb, blob) TO conn
        ]
        (FALSE, error) : [
            SEND (tag_read, error) TO println
        ]
        END
    ]
]
CREATE on_close WITH \conn.[
    SEND (tag_close, conn) TO println
]
SEND (?, listen_cb, alice_petname, on_open, on_close) TO tcp_dev
