# Demonstrates the filesystem device.

DEF blob_key AS 4 # from dev.asm
DEF fs_key AS 103 # from dev.asm
DEF fs_file AS 0 # from dev.asm
DEF fs_begin AS 0 # from dev.asm
DEF blob_dev AS system(blob_key)
DEF fs_dev AS system(fs_key)
DEF file_path AS "/d/f.txt"
DEF tag_file AS 5000
DEF tag_write AS 5001
DEF tag_seek AS 5002
DEF tag_read AS 5003
DEF tag_pass AS 5004
DEF tag_fail AS 5005
DEF length(list) AS CASE list OF
(_, rest) : add(1, length(rest))
_ : 0
END
DEF label_beh(rcvr, label) AS \msg.[
    SEND (label, msg) TO rcvr
]
DEF callback_beh(tag, ok_cust, fail_cust) AS \result.[
    CASE result OF
    (TRUE, value) : [
        SEND (tag, value) TO println
        SEND value TO ok_cust
    ]
    (FALSE, error) : [
        SEND (tag, error) TO println
        SEND error TO fail_cust
    ]
    END
]
DEF fill_blob_beh AS \(cust, blob, offset, byte_list).[
    CASE byte_list OF
    (byte, rest) : [
        SEND (blob_write_cust, offset, byte) TO blob
        CREATE blob_write_cust WITH \_.[
            SEND (cust, blob, add(offset, 1), rest) TO NEW fill_blob_beh
        ]
    ]
    _ : [
        SEND blob TO cust
    ]
    END
]
DEF make_blob_beh AS \(cust, byte_list).[
    DEF size AS length(byte_list)
    SEND (blob_cust, size) TO blob_dev # alloc blob
    CREATE blob_cust WITH \blob.[
        SEND (cust, blob, 0, byte_list) TO NEW fill_blob_beh
    ]
]
CREATE sink WITH \_.[]

# Steps:
#   Make a blob containing the file's path
#   Make a file with that path
#   Write the file's path to the file
#   Seek backwards
#   Read the second byte from the file
#   Check the byte matches

SEND (path_blob_cust, file_path) TO NEW make_blob_beh
CREATE path_blob_cust WITH \path_blob.[
    SEND (?, file_cb, fs_file, path_blob, TRUE) TO fs_dev
    CREATE file_cb WITH callback_beh(tag_file, file_cust, sink)
    CREATE file_cust WITH \file.[
        SEND (?, write_cb, path_blob) TO file
        CREATE write_cb WITH callback_beh(tag_write, write_cust, sink)
        CREATE write_cust WITH \_.[
            SEND (?, seek_cb, fs_begin, 1) TO file
            CREATE seek_cb WITH callback_beh(tag_seek, seek_cust, sink)
            CREATE seek_cust WITH \_.[
                SEND (?, read_cb, 1) TO file
                CREATE read_cb WITH callback_beh(tag_read, read_cust, sink)
                CREATE read_cust WITH \blob.[
                    DEF (_, expected_byte, rest) AS file_path
                    SEND (read_byte_cust, 0) TO blob
                    CREATE read_byte_cust WITH \actual_byte.[
                        CASE actual_byte OF
                        $expected_byte : [
                            SEND (tag_pass, actual_byte) TO println
                        ]
                        _ : [
                            SEND (tag_fail, actual_byte) TO println
                        ]
                        END
                    ]
                ]
            ]
        ]
    ]
]

